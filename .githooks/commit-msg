#!/bin/bash
# Commit-msg hook for GPT-Image-1-Playground
# Validates and enhances commit messages

# Get the commit message file
COMMIT_MSG_FILE=$1
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo "üìù Validating commit message..."

# Function to check if Claude Code is available
check_claude() {
    if command -v claude &> /dev/null; then
        return 0
    else
        return 1
    fi
}

# Track if validation fails
FAILED=0

# 1. Check minimum length
MSG_LENGTH=${#COMMIT_MSG}
if [ $MSG_LENGTH -lt 10 ]; then
    echo -e "${RED}‚ùå Commit message too short (minimum 10 characters)${NC}"
    FAILED=1
fi

# 2. Check for conventional commit format (optional but recommended)
# Format: type(scope): description
CONVENTIONAL_PATTERN="^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .+"
if [[ $COMMIT_MSG =~ $CONVENTIONAL_PATTERN ]]; then
    echo -e "${GREEN}‚úÖ Follows conventional commit format${NC}"
else
    # Check if it at least starts with a capital letter
    if [[ ! $COMMIT_MSG =~ ^[A-Z] ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Commit message should start with a capital letter${NC}"
    fi
fi

# 3. Check for issue references
if [[ $COMMIT_MSG =~ \#[0-9]+ ]]; then
    echo -e "${GREEN}‚úÖ Contains issue reference${NC}"
fi

# 4. Warn about generic messages
GENERIC_MESSAGES=(
    "^fix$"
    "^fixed$"
    "^update$"
    "^updated$"
    "^change$"
    "^changed$"
    "^misc$"
    "^various$"
    "^stuff$"
    "^work$"
)

for pattern in "${GENERIC_MESSAGES[@]}"; do
    if [[ $COMMIT_MSG =~ $pattern ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Commit message is too generic${NC}"
        echo "Please provide more specific details about the changes"
        FAILED=1
        break
    fi
done

# 5. Check line length (first line should be <= 72 chars)
FIRST_LINE=$(echo "$COMMIT_MSG" | head -n1)
FIRST_LINE_LENGTH=${#FIRST_LINE}
if [ $FIRST_LINE_LENGTH -gt 72 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  First line is $FIRST_LINE_LENGTH chars (recommended: ‚â§72)${NC}"
fi

# 6. Check for Danish-specific commits
if [[ $COMMIT_MSG =~ (dansk|danish|overs√¶t|translate|lokalisering|localization) ]]; then
    echo -e "${BLUE}üá©üá∞ Danish localization commit detected${NC}"
    
    # Suggest running Danish check if Claude is available
    if check_claude; then
        echo "Consider running: claude /check-danish after committing"
    fi
fi

# 7. Check for component-specific patterns
COMPONENT_PATTERNS=(
    "konverter:Konverter tools"
    "packshot:Packshot processor"
    "mood:Mood processor"
    "template:Prompt templates"
    "api:API routes"
    "auth:Authentication"
    "storage:Storage system"
)

for pattern in "${COMPONENT_PATTERNS[@]}"; do
    IFS=':' read -r prefix description <<< "$pattern"
    if [[ $COMMIT_MSG =~ $prefix ]]; then
        echo -e "${BLUE}üè∑Ô∏è  $description commit detected${NC}"
        break
    fi
done

# 8. Use Claude to enhance commit message if available
if check_claude && [ $FAILED -eq 0 ]; then
    # Only enhance if message seems incomplete or could be improved
    if [ $FIRST_LINE_LENGTH -lt 30 ] || [[ ! $COMMIT_MSG =~ $CONVENTIONAL_PATTERN ]]; then
        echo -e "\n${BLUE}ü§ñ Analyzing commit message with Claude...${NC}"
        
        # Get list of staged files for context
        STAGED_FILES=$(git diff --cached --name-only)
        
        # Create a temporary file with context
        CONTEXT_FILE=$(mktemp)
        echo "Commit message: $COMMIT_MSG" > "$CONTEXT_FILE"
        echo -e "\nStaged files:" >> "$CONTEXT_FILE"
        echo "$STAGED_FILES" >> "$CONTEXT_FILE"
        
        # Check if we should suggest conventional format
        if [[ ! $COMMIT_MSG =~ $CONVENTIONAL_PATTERN ]]; then
            echo -e "${YELLOW}üí° Tip: Consider using conventional commit format:${NC}"
            echo "  feat: new feature"
            echo "  fix: bug fix"
            echo "  docs: documentation changes"
            echo "  style: formatting, missing semicolons, etc"
            echo "  refactor: code restructuring"
            echo "  test: adding tests"
            echo "  chore: maintenance tasks"
            
            # Analyze the changes to suggest a type
            if echo "$STAGED_FILES" | grep -q "\.test\.\|\.spec\."; then
                echo -e "${YELLOW}  Suggested: test: $COMMIT_MSG${NC}"
            elif echo "$STAGED_FILES" | grep -q "README\|\.md$\|CLAUDE\.md"; then
                echo -e "${YELLOW}  Suggested: docs: $COMMIT_MSG${NC}"
            elif echo "$STAGED_FILES" | grep -q "package\.json\|\.config\|\.gitignore"; then
                echo -e "${YELLOW}  Suggested: chore: $COMMIT_MSG${NC}"
            fi
        fi
        
        rm -f "$CONTEXT_FILE"
    fi
fi

# 9. Check for security-related commits
if [[ $COMMIT_MSG =~ (security|auth|password|token|key|secret|credential|CVE|vulnerability) ]]; then
    echo -e "${RED}üîê Security-related commit detected${NC}"
    echo "Ensure no sensitive information is included in the commit"
    
    if check_claude; then
        echo "Running security check..."
        claude /check-security --staged 2>/dev/null || true
    fi
fi

# 10. Add metadata to commit message (branch info)
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "$CURRENT_BRANCH" != "master" ] && [ "$CURRENT_BRANCH" != "main" ]; then
    # Check if branch name is already in the message
    if [[ ! $COMMIT_MSG =~ $CURRENT_BRANCH ]]; then
        # Don't modify conventional commits
        if [[ ! $COMMIT_MSG =~ $CONVENTIONAL_PATTERN ]]; then
            echo -e "${BLUE}üìå Adding branch reference to commit message${NC}"
            echo -e "\n[$CURRENT_BRANCH]" >> "$COMMIT_MSG_FILE"
        fi
    fi
fi

# Final validation result
if [ $FAILED -eq 1 ]; then
    echo -e "\n${RED}‚ùå Commit message validation failed!${NC}"
    echo "Please update your commit message and try again."
    echo "Use 'git commit --amend' to modify the message."
    exit 1
else
    echo -e "\n${GREEN}‚úÖ Commit message validated!${NC}"
    
    # Log good commit messages as examples
    LOG_DIR=".dev-logs"
    mkdir -p "$LOG_DIR"
    if [[ $COMMIT_MSG =~ $CONVENTIONAL_PATTERN ]] && [ $FIRST_LINE_LENGTH -le 72 ]; then
        echo "$COMMIT_MSG" >> "$LOG_DIR/good-commit-messages.log"
    fi
    
    exit 0
fi