#!/bin/bash
# Post-merge hook for GPT-Image-1-Playground
# Handles post-merge tasks and dependency updates

echo "🔀 Running post-merge tasks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get merge information
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
MERGE_COMMIT=$(git rev-parse HEAD)

echo -e "${BLUE}📍 Current branch: ${NC}$CURRENT_BRANCH"
echo -e "${BLUE}🔗 Merge commit: ${NC}$MERGE_COMMIT"

# Function to check if Claude Code is available
check_claude() {
    if command -v claude &> /dev/null; then
        return 0
    else
        return 1
    fi
}

# 1. Check if package.json was updated
echo "📦 Checking for dependency updates..."
if git diff-tree --no-commit-id --name-only -r HEAD^ HEAD 2>/dev/null | grep -q "package\.json"; then
    echo -e "${YELLOW}📦 package.json was updated in the merge${NC}"
    echo "Running npm install to update dependencies..."
    
    if npm install; then
        echo -e "${GREEN}✅ Dependencies updated successfully${NC}"
    else
        echo -e "${RED}❌ Failed to update dependencies${NC}"
        echo "Please run 'npm install' manually"
    fi
else
    echo "No package.json changes detected"
fi

# 2. Check if package-lock.json conflicts were resolved
if git diff-tree --no-commit-id --name-only -r HEAD^ HEAD 2>/dev/null | grep -q "package-lock\.json"; then
    if [ -f "package-lock.json.orig" ]; then
        echo -e "${YELLOW}⚠️  Found package-lock.json.orig - cleaning up${NC}"
        rm -f package-lock.json.orig
    fi
fi

# 3. Check for schema or type definition changes
echo "🔍 Checking for type definition changes..."
if git diff-tree --no-commit-id --name-only -r HEAD^ HEAD 2>/dev/null | grep -q "\.d\.ts\|types\.ts"; then
    echo -e "${YELLOW}📝 Type definitions changed - running TypeScript check${NC}"
    
    if npm run typecheck 2>/dev/null; then
        echo -e "${GREEN}✅ TypeScript check passed${NC}"
    else
        echo -e "${RED}❌ TypeScript errors detected${NC}"
        echo "Please fix type errors before continuing"
    fi
fi

# 4. Check for new environment variables
echo "🔐 Checking for environment variable changes..."
if git diff-tree --no-commit-id --name-only -r HEAD^ HEAD 2>/dev/null | grep -q "\.env\.example\|CLAUDE\.md"; then
    echo -e "${YELLOW}🔑 Environment configuration may have changed${NC}"
    echo "Please check if you need to update your .env.local file"
    
    # Show new env vars if .env.example exists
    if [ -f ".env.example" ]; then
        echo "Current .env.example contains:"
        grep -E "^[A-Z_]+=" .env.example | cut -d'=' -f1 | sed 's/^/  - /'
    fi
fi

# 5. Check for migration or database changes
echo "💾 Checking for database changes..."
if git diff-tree --no-commit-id --name-only -r HEAD^ HEAD 2>/dev/null | grep -q "db\.ts\|dexie\|indexeddb"; then
    echo -e "${YELLOW}🗄️  Database schema may have changed${NC}"
    echo "Clear your browser's IndexedDB if you experience issues"
fi

# 6. Check for API route changes
API_CHANGES=$(git diff-tree --no-commit-id --name-only -r HEAD^ HEAD 2>/dev/null | grep "^src/app/api/" || true)
if [ -n "$API_CHANGES" ]; then
    echo -e "${YELLOW}🔌 API routes changed:${NC}"
    echo "$API_CHANGES" | sed 's/^/  - /'
    echo "Test these endpoints after starting the dev server"
fi

# 7. Run Claude checks if available
if check_claude; then
    echo -e "\n${BLUE}🤖 Running Claude post-merge analysis...${NC}"
    
    # Check for potential conflicts or issues
    echo "🔍 Analyzing merge for potential issues..."
    
    # Get list of all changed files
    CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD^ HEAD 2>/dev/null || true)
    FILE_COUNT=$(echo "$CHANGED_FILES" | wc -l)
    
    if [ "$FILE_COUNT" -gt 20 ]; then
        echo -e "${YELLOW}⚠️  Large merge detected ($FILE_COUNT files changed)${NC}"
        echo "Running comprehensive checks..."
        
        # Run quick check
        claude /qcheck 2>/dev/null || echo -e "${YELLOW}⚠️  Quick check found potential issues${NC}"
    fi
    
    # Check if Konverter tools were affected
    if echo "$CHANGED_FILES" | grep -q "konverter"; then
        echo "🔧 Konverter tools affected by merge - running validation..."
        claude /debug-konverter --validate 2>/dev/null || true
    fi
fi

# 8. Clean up any merge artifacts
echo "🧹 Cleaning up merge artifacts..."
find . -name "*.orig" -type f -delete 2>/dev/null || true
find . -name "*_BACKUP_*" -type f -delete 2>/dev/null || true
find . -name "*_BASE_*" -type f -delete 2>/dev/null || true
find . -name "*_LOCAL_*" -type f -delete 2>/dev/null || true
find . -name "*_REMOTE_*" -type f -delete 2>/dev/null || true

# 9. Rebuild if needed
if [ -f "next.config.mjs" ] || [ -f "next.config.js" ]; then
    NEXT_CONFIG_CHANGED=$(git diff-tree --no-commit-id --name-only -r HEAD^ HEAD 2>/dev/null | grep -E "next\.config\.(mjs|js)" || true)
    if [ -n "$NEXT_CONFIG_CHANGED" ]; then
        echo -e "${YELLOW}⚙️  Next.js configuration changed${NC}"
        echo "You may need to restart the dev server"
    fi
fi

# 10. Log the merge
LOG_DIR=".dev-logs"
mkdir -p "$LOG_DIR"
MERGE_DATE=$(date '+%Y-%m-%d %H:%M:%S')
echo "[$MERGE_DATE] Merged into $CURRENT_BRANCH - $MERGE_COMMIT" >> "$LOG_DIR/merges.log"
echo "  Files changed: $FILE_COUNT" >> "$LOG_DIR/merges.log"

# Final message
echo -e "\n${GREEN}✅ Post-merge tasks completed!${NC}"

# Suggest next steps
if [ -n "$API_CHANGES" ] || [ "$FILE_COUNT" -gt 10 ]; then
    echo -e "\n${YELLOW}📋 Suggested next steps:${NC}"
    echo "  1. Run 'npm run dev' to start the development server"
    echo "  2. Test affected features"
    echo "  3. Run 'npm run lint' to check code style"
    [ -n "$API_CHANGES" ] && echo "  4. Test modified API endpoints"
fi

echo -e "\n${GREEN}Happy coding! 🚀${NC}"