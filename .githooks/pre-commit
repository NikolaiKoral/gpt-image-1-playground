#!/bin/bash
# Pre-commit hook for GPT-Image-1-Playground
# Runs quality checks before allowing commits

echo "üîç Running pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Track if any checks fail
FAILED=0

# Function to check if Claude Code is available
check_claude() {
    if command -v claude &> /dev/null; then
        return 0
    else
        return 1
    fi
}

# Run Claude agent checks if available
if check_claude; then
    echo -e "${GREEN}ü§ñ Claude Code detected, running specialized checks...${NC}"
    
    # Security check
    echo "üîê Running security check..."
    if ! claude /check-security --brief 2>/dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  Security check had warnings${NC}"
    fi
    
    # Danish localization check  
    echo "üá©üá∞ Running Danish localization check..."
    if ! claude /check-danish --brief 2>/dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  Localization check had warnings${NC}"
    fi
    
    # Memory leak check
    echo "üíæ Running memory leak check..."
    if ! claude /check-memory --brief 2>/dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  Memory check had warnings${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Claude Code not found, running basic checks...${NC}"
    
    # TypeScript check
    echo "üìù Running TypeScript check..."
    if ! npm run typecheck 2>/dev/null; then
        echo -e "${RED}‚ùå TypeScript errors found${NC}"
        FAILED=1
    fi
    
    # Lint check
    echo "üßπ Running lint check..."
    if ! npm run lint 2>/dev/null; then
        echo -e "${RED}‚ùå Lint errors found${NC}"
        FAILED=1
    fi
fi

# Check for console.log statements in staged files
echo "üîç Checking for console.log statements..."
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx|js|jsx)$' || true)
if [ -n "$STAGED_FILES" ]; then
    if echo "$STAGED_FILES" | xargs grep -l "console\.log" 2>/dev/null; then
        echo -e "${RED}‚ùå Found console.log statements in staged files${NC}"
        echo "Remove them or use proper logging before committing."
        FAILED=1
    fi
fi

# Check for exposed API keys
echo "üîë Checking for exposed API keys..."
if [ -n "$STAGED_FILES" ]; then
    if echo "$STAGED_FILES" | xargs grep -E "(OPENAI_API_KEY|GEMINI_API_KEY|REMOVE_BG_API_KEY|RUNWAYML_API_SECRET).*=.*['\"].*[a-zA-Z0-9]" 2>/dev/null; then
        echo -e "${RED}‚ùå Found potential API key exposure in staged files${NC}"
        echo "Use environment variables instead!"
        FAILED=1
    fi
fi

# Check for TODO comments
echo "üìã Checking for TODO comments..."
if [ -n "$STAGED_FILES" ]; then
    TODO_COUNT=$(echo "$STAGED_FILES" | xargs grep -c "TODO" 2>/dev/null || echo "0")
    if [ "$TODO_COUNT" -gt "0" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Found $TODO_COUNT TODO comment(s) in staged files${NC}"
        read -p "Continue with TODOs? (y/n) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            FAILED=1
        fi
    fi
fi

# Check file size for images
echo "üì¶ Checking file sizes..."
LARGE_FILES=$(git diff --cached --name-only --diff-filter=ACM | xargs -I {} sh -c 'test -f "{}" && find "{}" -size +5M' 2>/dev/null || true)
if [ -n "$LARGE_FILES" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Found large files (>5MB):${NC}"
    echo "$LARGE_FILES"
    read -p "Continue with large files? (y/n) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        FAILED=1
    fi
fi

# Final result
if [ $FAILED -eq 1 ]; then
    echo -e "${RED}‚ùå Pre-commit checks failed!${NC}"
    echo "Fix the issues above or use --no-verify to bypass (not recommended)"
    exit 1
else
    echo -e "${GREEN}‚úÖ All pre-commit checks passed!${NC}"
    exit 0
fi